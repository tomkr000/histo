'''
This program turns czi files generated by Zeiss software and converts them to pickled .npy files
for easier manipulation, and so you don't have to use javabridge afterword (easier containerization)

CLI Inputs:

directory: str, the directory to use. npy files will be saved in the same directory
image_num: int, which image zoom level to use in the czi files (see README for explaination of czi zoom levels)
    NOTE: image_num is 0-indexed while the image number in the image name is 1-indexed
    (ex: "20201111_R0396_VHorn_Profile7_Slide7.czi #03.npy" is the 3rd image, at index 2)
'''


import javabridge
import bioformats as bf
import numpy as np
import pandas as pd
from tqdm import tqdm
from tqdm import trange
from pathlib import Path
import argparse
from coda_histo import histo_analysis as ha

javabridge.start_vm(class_path=bf.JARS)

#folder = r'/media/tom/Rapid/EXP2020-0011_CODAs_in_DRG/'
def parseArguments():
    # Create argument parser
    parser = argparse.ArgumentParser()

    parser.add_argument('directory', type=str,
                        help='''name of directory to process''')

    parser.add_argument('image_num', type=int,
                        help='zoom level of czi file to use')

    args = parser.parse_args()
    return args


def create_metadata_csv(path, csv_name='all_metadata.csv', filetype='czi'):
    files = Path(path).glob('*' + filetype)
    df_ = pd.DataFrame()
    files = [file.as_posix() for file in files]

    for file in tqdm(files):
        o = bf.OMEXML(bf.get_omexml_metadata(file))
        series = o.image_count
        for i in range(series):
            dic = {'file': file,
                   'image_name': ha.get_image_name(o, i),
                   'index_': int(i),
                   'sizex': ha.get_sizex(o, i),
                   'sizey': ha.get_sizey(o, i)}
            df_ = df_.append(dic, ignore_index=True)

    df_ = df_.query('image_name != "label image"').query('image_name != "macro image"')
    print(df_)
    df_.reset_index(inplace=True)
    df_.drop(columns='index', inplace=True)
    # df_.to_csv(path + csv_name)
    return df_


def select_images(df_metadata, image_num_):
    '''
    Selects which images to convert based on image_num
    image_num : int, zero-indexed number of zoom factors to decrease by.
        Ex: Want zoom factor of 2 (second image in czi file)? image_num = 1.

    '''
    df_out = pd.DataFrame()
    df_ = df.copy()
    df_['load'] = False

    for file in df_.file.unique():
        df_this = df_.query('file == @file')
        df_this.sort_values('index_', inplace=True)
        lastx = 0
        for i in range(len(df_this)):
            sizex = df_this['sizex'].iloc[i]
            if sizex > lastx:
                df_['load'].iat[df_[df['image_name'] == df_this['image_name'].iloc[i+image_num_]].index[0]] = True
            lastx = df_this['sizex'].iloc[i]
    return df_


def save_bf_as_npy(df_metadata_, path):
    for i in trange(len(df_metadata_)):
        if df_metadata_['load'].iloc[i]:
            img = bf.load_image(df_metadata_['file'].iloc[i],
                                series=df['index_'].iloc[i],
                                rescale=False)  # load the image
            np.save(path + df_metadata_['image_name'].iloc[i], img)


if __name__ == '__main__':
    args = parseArguments()
    folder = args.directory
    image_num= args.image_num
    df = create_metadata_csv(folder)
    print('Done with metadata')
    df_metadatas = select_images(df, image_num)
    df_metadatas.to_csv(folder + 'metadata.csv')
    print('selected images')
    save_bf_as_npy(df_metadatas, folder)